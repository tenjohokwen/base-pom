<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>org.mvn</groupId>
    <artifactId>base-pom</artifactId>
    <version>1.5-SNAPSHOT</version>
    <packaging>pom</packaging>
    <name>base-pom</name>

    <properties>
        <project.build.targetJdk>1.8</project.build.targetJdk>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.inputEncoding>UTF-8</project.reporting.inputEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <basepom.maven.version>3.0.0</basepom.maven.version>
        <!-- minimum maven version -->
        <basepom.build.memory.initial>1024m</basepom.build.memory.initial>
        <basepom.build.memory.max>1024m</basepom.build.memory.max>

        <basepom.plugin.assembly.version>2.5.5</basepom.plugin.assembly.version>
        <basepom.plugin.buildnumer.version>1.3</basepom.plugin.buildnumer.version>
        <basepom.plugin.checkstyle.version>2.12.1</basepom.plugin.checkstyle.version>
        <basepom.plugin.clean.version>2.6.1</basepom.plugin.clean.version>
        <basepom.plugin.cobertura.version>2.7</basepom.plugin.cobertura.version>
        <basepom.plugin.compiler.version>3.3</basepom.plugin.compiler.version>
        <basepom.plugin.dependency.version>2.10</basepom.plugin.dependency.version>
        <basepom.plugin.dependency-versions-check.version>2.0.2</basepom.plugin.dependency-versions-check.version>
        <basepom.plugin.deploy.version>2.8.2</basepom.plugin.deploy.version>
        <basepom.plugin.duplicate-finder.version>1.0.9</basepom.plugin.duplicate-finder.version>
        <basepom.plugin.enforcer.version>1.4</basepom.plugin.enforcer.version>
        <basepom.plugin.exec.version>1.4.0</basepom.plugin.exec.version>
        <basepom.plugin.findbugs.version>3.0.2</basepom.plugin.findbugs.version>
        <basepom.plugin.git-commit-id.version>2.1.15</basepom.plugin.git-commit-id.version>
        <basepom.plugin.install.version>2.5.2</basepom.plugin.install.version>
        <basepom.plugin.jar.version>2.6</basepom.plugin.jar.version>
        <basepom.plugin.javadoc.version>2.10.3</basepom.plugin.javadoc.version>
        <basepom.plugin.pmd.version>3.4</basepom.plugin.pmd.version>
        <basepom.plugin.release.version>2.5.2</basepom.plugin.release.version>
        <basepom.plugin.resources.version>2.7</basepom.plugin.resources.version>
        <basepom.plugin.scm.version>1.9.4</basepom.plugin.scm.version>
        <basepom.plugin.shade.version>2.4</basepom.plugin.shade.version>
        <basepom.plugin.site.version>3.3</basepom.plugin.site.version>
        <basepom.plugin.source.version>2.4</basepom.plugin.source.version>
        <basepom.plugin.surefire.version>2.18.1</basepom.plugin.surefire.version>
        <basepom.plugin.versions.version>2.2</basepom.plugin.versions.version>

        <basepom.checkstyle.not.configured>false</basepom.checkstyle.not.configured>
    </properties>

    <prerequisites>
        <maven>${basepom.maven.version}</maven>
        <!-- minimum maven version -->
    </prerequisites>

    <!-- for releases -->
    <distributionManagement>
        <repository>
            <id>local-nexus-releases</id>
            <url>http://localhost:8085/nexus/content/repositories/releases</url>
        </repository>
        <snapshotRepository>
            <id>local-nexus-releases</id>
            <url>http://localhost:8085/nexus/content/repositories/snapshots</url>
        </snapshotRepository>
    </distributionManagement>

    <!-- for pulling dependencies -->
    <repositories>
        <repository>
            <releases/>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
            <id>local-nexus-release</id>
            <name>Releases Repository</name>
            <url>http://localhost:8085/nexus/content/groups/public</url>
        </repository>
        <repository>
            <id>central-maven</id>
            <name>Maven Repository</name>
            <url>http://repo1.maven.org/maven2/</url>
            <releases>
                <enabled>true</enabled>
                <updatePolicy>never</updatePolicy>
                <checksumPolicy>warn</checksumPolicy>
            </releases>
            <snapshots>
                <enabled>false</enabled>
                <updatePolicy>never</updatePolicy>
                <checksumPolicy>warn</checksumPolicy>
            </snapshots>
        </repository>
        <repository>
            <id>jboss-public-repository</id>
            <name>JBoss Public Maven Repository Group</name>
            <url>http://repository.jboss.org/nexus/content/groups/public/</url>
            <releases>
                <enabled>true</enabled>
                <updatePolicy>never</updatePolicy>
                <checksumPolicy>warn</checksumPolicy>
            </releases>
            <snapshots>
                <enabled>false</enabled>
                <updatePolicy>never</updatePolicy>
                <checksumPolicy>warn</checksumPolicy>
            </snapshots>
        </repository>
        <repository>
            <id>spring-snapshots</id>
            <url>http://repo.spring.io/libs-snapshot</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
    </repositories>
    <pluginRepositories>
        <pluginRepository>
            <releases/>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
            <id>local-nexus-release</id>
            <name>Releases Repository</name>
            <url>http://localhost:8085/nexus/content/groups/public</url>
        </pluginRepository>
        <pluginRepository>
            <id>spring-snapshots</id>
            <url>http://repo.spring.io/libs-snapshot</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>

    <build>
        <finalName>${project.artifactId}-${project.version}-${buildNumber}</finalName>

        <!-- Use maven to substitute values for variables in various places -->
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>

        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-enforcer-plugin</artifactId>
                    <version>${basepom.plugin.enforcer.version}</version>
                    <configuration>
                        <skip>false</skip>
                        <fail>true</fail>
                        <failFast>false</failFast>
                        <rules>
                            <requireMavenVersion>
                                <version>[${basepom.maven.version},)</version>
                            </requireMavenVersion>
                            <requireJavaVersion>
                                <version>${project.build.targetJdk}</version>
                            </requireJavaVersion>
                        </rules>
                    </configuration>
                </plugin>

                <!-- This plugin generates super-useful git repo information into a git.properties file, -->
                <!-- which is accessible inside our app from the /revision and /git_status endpoints.    -->
                <!-- https://github.com/ktoso/maven-git-commit-id-plugin -->
                <plugin>
                    <groupId>pl.project13.maven</groupId>
                    <artifactId>git-commit-id-plugin</artifactId>
                    <version>${basepom.plugin.git-commit-id.version}</version>

                    <configuration>
                        <prefix>git</prefix>
                        <dateFormat>dd.MM.yyyy '@' HH:mm:ss z</dateFormat>
                        <verbose>true</verbose>
                        <dotGitDirectory>${basedir}/.git</dotGitDirectory>
                        <skipPoms>true</skipPoms>
                        <!-- this is false by default, forces the plugin to generate the git.properties file -->
                        <generateGitPropertiesFile>false</generateGitPropertiesFile>
                        <generateGitPropertiesFilename>src/main/resources/git.properties</generateGitPropertiesFilename>
                        <failOnNoGitDirectory>false</failOnNoGitDirectory>
                        <gitDescribe>
                            <!-- don't generate the describe property -->
                            <skip>false</skip>
                            <always>false</always>
                            <!-- how many chars should be displayed as the commit object id? -->
                            <abbrev>7</abbrev>
                            <!-- when the build is triggered while the repo is in "dirty state", append this suffix -->
                            <dirty>-dirty</dirty>
                            <forceLongFormat>false</forceLongFormat>
                        </gitDescribe>
                    </configuration>
                </plugin>

                <!-- Compiler plugin, change default source version to 1.8 (Apparently it defaults to 1.5) -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${basepom.plugin.compiler.version}</version>
                    <configuration>
                        <source>${project.build.targetJdk}</source>
                        <target>${project.build.targetJdk}</target>
                        <encoding>${project.build.sourceEncoding}</encoding>
                        <meminitial>${basepom.build.memory.initial}</meminitial>
                        <maxmem>${basepom.build.memory.max}</maxmem>
                        <showWarnings>true</showWarnings>
                        <compilerArgument>-Xlint:unchecked</compilerArgument>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${basepom.plugin.resources.version}</version>
                    <configuration>
                        <encoding>${project.build.sourceEncoding}</encoding>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>${basepom.plugin.dependency.version}</version>
                    <configuration>
                        <failOnWarning>false</failOnWarning>
                        <ignoreNonCompile>true</ignoreNonCompile>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-assembly-plugin</artifactId>
                    <version>${basepom.plugin.assembly.version}</version>
                    <configuration>
                        <!-- must be true for jar-with-dependencies builds -->
                        <appendAssemblyId>true</appendAssemblyId>
                        <!-- Always use GNU tar mode. -->
                        <tarLongFileMode>gnu</tarLongFileMode>
                    </configuration>
                </plugin>

                <!-- maven-surefire-plugin is the default target when running 'mvn test'.  We include it here  -->
                <!-- since we need to specify the custom.logpath variable in order for our logging to work.    -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${basepom.plugin.surefire.version}</version>
                    <configuration>
                        <!-- http://maven.apache.org/surefire/maven-surefire-plugin/examples/fork-options-and-parallel-execution.html -->
                        <forkCount>2.5C</forkCount>
                        <reuseForks>false</reuseForks>
                        <argLine>-Dfile.encoding=${project.build.sourceEncoding} -Xms${basepom.build.memory.initial}
                            -Xmx${basepom.build.memory.max} -XX:MaxPermSize=256m
                        </argLine>
                        <systemPropertyVariables>
                            <sun.jnu.encoding>${project.build.sourceEncoding}</sun.jnu.encoding>
                            <user.timezone>UTC</user.timezone>
                            <java.awt.headless>true</java.awt.headless>
                            <custom.logpath>${project.build.directory}</custom.logpath>
                            <buildDirectory>${project.build.directory}</buildDirectory>
                        </systemPropertyVariables>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-release-plugin</artifactId>
                    <version>2.5.2</version>
                    <configuration>
                        <tagNameFormat>v@{project.version}</tagNameFormat>
                        <autoVersionSubmodules>true</autoVersionSubmodules>
                        <releaseProfiles>releases</releaseProfiles>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>${basepom.plugin.javadoc.version}</version>
                    <configuration>
                        <source>${project.build.targetJdk}</source>
                        <encoding>${project.build.sourceEncoding}</encoding>
                        <minmemory>${basepom.build.memory.initial}</minmemory>
                        <maxmemory>${basepom.build.memory.max}</maxmemory>
                        <additionalparam>-quiet</additionalparam>
                    </configuration>
                </plugin>

                <!-- Always build a jar with the test classes -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>${basepom.plugin.jar.version}</version>
                    <configuration>
                        <!-- do not build an empty jar if the project is e.g. a pom project -->
                        <skipIfEmpty>true</skipIfEmpty>
                        <archive>
                            <manifest>
                                <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                                <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                                <addClasspath>false</addClasspath>
                            </manifest>
                        </archive>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>com.ning.maven.plugins</groupId>
                    <artifactId>maven-dependency-versions-check-plugin</artifactId>
                    <version>${basepom.plugin.dependency-versions-check.version}</version>
                    <configuration>
                        <skip>false</skip>
                        <failBuildInCaseOfConflict>true</failBuildInCaseOfConflict>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>com.ning.maven.plugins</groupId>
                    <artifactId>maven-duplicate-finder-plugin</artifactId>
                    <version>${basepom.plugin.duplicate-finder.version}</version>
                    <configuration>
                        <skip>false</skip>
                        <failBuildInCaseOfConflict>true</failBuildInCaseOfConflict>
                    </configuration>
                </plugin>

                <!-- Specify explicit known-good versions for plugins -->

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>${basepom.plugin.clean.version}</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>${basepom.plugin.deploy.version}</version>
                    <configuration>
                        <skip>true</skip>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>${basepom.plugin.install.version}</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>${basepom.plugin.source.version}</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-shade-plugin</artifactId>
                    <version>${basepom.plugin.shade.version}</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>${basepom.plugin.site.version}</version>
                </plugin>

                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>buildnumber-maven-plugin</artifactId>
                    <version>${basepom.plugin.buildnumer.version}</version>
                </plugin>

                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>${basepom.plugin.exec.version}</version>
                </plugin>

                <!-- The Versions Plugin is used when you want to manage the versions of artifacts in a project's POM -->
                <!-- i.e. mvn versions:set 1.3, or mvn versions:revert -->
                <!-- see mvn versions:help for more info -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>versions-maven-plugin</artifactId>
                    <version>${basepom.plugin.versions.version}</version>
                </plugin>

                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>findbugs-maven-plugin</artifactId>
                    <version>${basepom.plugin.findbugs.version}</version>
                    <configuration>
                        <jvmargs>-Xms${basepom.build.memory.initial} -Xmx${basepom.build.memory.max}</jvmargs>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-checkstyle-plugin</artifactId>
                    <version>${basepom.plugin.checkstyle.version}</version>
                </plugin>

                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>cobertura-maven-plugin</artifactId>
                    <version>${basepom.plugin.cobertura.version}</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-pmd-plugin</artifactId>
                    <version>${basepom.plugin.pmd.version}</version>
                    <configuration>
                        <sourceEncoding>${project.build.sourceEncoding}</sourceEncoding>
                        <targetJdk>${project.build.targetJdk}</targetJdk>
                    </configuration>
                    <executions>
                        <execution>
                            <phase>verify</phase>
                            <goals>
                                <goal>check</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>

        <!-- The default build -->
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>buildnumber-maven-plugin</artifactId>
                <executions>
                    <!-- Populates the ${buildNumber} variable with the most recent git commit tag (or sha if no tag exists) -->
                    <execution>
                        <id>buildNumber</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>create</goal>
                        </goals>
                        <configuration>
                            <shortRevisionLength>10</shortRevisionLength>
                            <doCheck>false</doCheck>
                            <doUpdate>false</doUpdate>
                        </configuration>
                    </execution>
                    <!-- Populates the ${epkgBuildNumber} variable with a timestamp suitable for epkg artifacts -->
                    <execution>
                        <id>epkgBuildNumber</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>create</goal>
                        </goals>
                        <configuration>
                            <buildNumberPropertyName>epkgBuildNumber</buildNumberPropertyName>
                            <format>{0,date,yyyy.MM.dd_HH.mm}</format>
                            <items>
                                <item>timestamp</item>
                            </items>
                            <doCheck>false</doCheck>
                            <doUpdate>false</doUpdate>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <!-- it binds to the initialize phase by default -->
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>revision</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>analyze-only</goal>
                            <goal>analyze-duplicate</goal>
                            <goal>analyze-dep-mgt</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <executions>
                    <execution>
                        <id>attach-tests</id>
                        <phase>package</phase>
                        <goals>
                            <!-- Always build a test-jar (if test classes present) -->
                            <goal>test-jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>com.ning.maven.plugins</groupId>
                <artifactId>maven-dependency-versions-check-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>com.ning.maven.plugins</groupId>
                <artifactId>maven-duplicate-finder-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <phase>package</phase>
                        <!-- Build source jars for both code and tests -->
                        <goals>
                            <goal>jar-no-fork</goal>
                            <goal>test-jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <phase>package</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <!--
    We only want certain high-load plugins (like code coverage) to run during our CI builds.
    The trigger to run this profile exists inside of .ci.yml
    -->
    <profiles>
        <profile>
            <id>checkstyle-not-configured</id>
            <activation>
                <file>
                    <missing>${basedir}/src/test/resources/checkstyle.xml</missing>
                </file>
            </activation>
            <properties>
                <basepom.checkstyle.not.configured>true</basepom.checkstyle.not.configured>
            </properties>
        </profile>
        <profile>
            <id>ci</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>findbugs-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>findbugs-check</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>check</goal>
                                    <goal>findbugs</goal>
                                </goals>
                                <configuration>
                                    <failOnError>false</failOnError>
                                    <effort>Max</effort>
                                    <threshold>High</threshold>
                                    <includeTests>true</includeTests>
                                    <xmlOutput>true</xmlOutput>
                                    <xmlOutputDirectory>target/site/findbugs</xmlOutputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-checkstyle-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>checkstyle-check</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>checkstyle</goal>
                                    <goal>checkstyle-aggregate</goal>
                                    <goal>check</goal>
                                </goals>
                                <configuration>
                                    <skip>${basepom.checkstyle.not.configured}</skip>
                                    <consoleOutput>true</consoleOutput>
                                    <logViolationsToConsole>true</logViolationsToConsole>
                                    <failOnViolation>false</failOnViolation>
                                    <maxAllowedViolations>10</maxAllowedViolations>
                                    <configLocation>${basedir}/src/test/resources/checkstyle.xml</configLocation>
                                    <includeTestSourceDirectory>true</includeTestSourceDirectory>
                                    <outputFileFormat>xml</outputFileFormat>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>cobertura-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>cobertura-check</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>clean</goal>
                                    <goal>cobertura</goal>
                                    <goal>check</goal>
                                </goals>
                                <configuration>
                                    <aggregate>true</aggregate>
                                    <formats>
                                        <format>html</format>
                                        <format>xml</format>
                                    </formats>
                                    <check>
                                        <branchRate>0</branchRate>
                                        <lineRate>0</lineRate>
                                        <totalBranchRate>0</totalBranchRate>
                                        <totalLineRate>0</totalLineRate>
                                        <packageLineRate>0</packageLineRate>
                                        <packageBranchRate>0</packageBranchRate>
                                    </check>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>releases</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.sonatype.plugins</groupId>
                        <artifactId>nexus-staging-maven-plugin</artifactId>
                        <version>1.6.5</version>
                        <executions>
                            <execution>
                                <id>default-deploy</id>
                                <phase>deploy</phase>
                                <goals>
                                    <goal>deploy</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <serverId>local-nexus-releases</serverId>
                            <nexusUrl>http://localhost:8085/nexus/</nexusUrl>
                            <skipStaging>true</skipStaging>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
    <scm>
        <connection>scm:git:git@github.com:bluebone29/base-pom.git</connection>
        <url>scm:git:git@github.com:bluebone29/base-pom.git</url>
        <developerConnection>scm:git:git@github.com:bluebone29/base-pom.git</developerConnection>
        <tag>HEAD</tag>
    </scm>

</project>
